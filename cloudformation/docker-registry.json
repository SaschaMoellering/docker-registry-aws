{  
   "AWSTemplateFormatVersion":"2010-09-09",
   "Description":"Creates a load balanced Docker registry",
   "Parameters":{  
      "InstanceType":{  
         "Description":"WebServer EC2 instance type",
         "Type":"String",
         "Default":"t2.small",
         "AllowedValues":[  
            "t2.micro",
            "t2.small",
            "t2.medium",
            "m1.small",
            "m1.medium",
            "m1.large",
            "m1.xlarge",
            "m2.xlarge",
            "m2.2xlarge",
            "m2.4xlarge",
            "m3.medium",
            "m3.large",
            "m3.xlarge",
            "m3.2xlarge",
            "c1.medium",
            "c1.xlarge",
            "c3.large",
            "c3.xlarge",
            "c3.2xlarge",
            "c3.4xlarge",
            "c3.8xlarge",
            "g2.2xlarge",
            "r3.large",
            "r3.xlarge",
            "r3.2xlarge",
            "r3.4xlarge",
            "r3.8xlarge",
            "i2.xlarge",
            "i2.2xlarge",
            "i2.4xlarge",
            "i2.8xlarge",
            "hi1.4xlarge",
            "hs1.8xlarge",
            "cr1.8xlarge",
            "cc2.8xlarge",
            "cg1.4xlarge"
         ],
         "ConstraintDescription":"must be a valid EC2 instance type."
      },
      "OperatorEMail":{  
         "Description":"EMail address to notify if there are any scaling operations",
         "Type":"String",
         "AllowedPattern":"([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
         "ConstraintDescription":"must be a valid email address."
      },
      "KeyName":{  
         "Description":"The EC2 Key Pair to allow SSH access to the instances",
         "Type":"AWS::EC2::KeyPair::KeyName",
         "ConstraintDescription":"must be the name of an existing EC2 KeyPair."
      },
      "SSHLocation":{  
         "Description":"The IP address range that can be used to SSH to the EC2 instances",
         "Type":"String",
         "MinLength":"9",
         "MaxLength":"18",
         "Default":"0.0.0.0/0",
         "AllowedPattern":"(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
         "ConstraintDescription":"must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "VpcId":{  
         "Type":"String",
         "Description":"VpcId of your existing Virtual Private Cloud (VPC).",
         "Default":"vpc-04e27861"
      },
      "Subnets":{  
         "Type":"CommaDelimitedList",
         "Default":"subnet-95fe3cbe,subnet-456e017f",
         "Description":"The list of SubnetIds where the stack will be launched"
      },
      "AZs":{  
         "Type":"CommaDelimitedList",
         "Default":"us-east-1b,us-east-1e",
         "Description":"The list of AvailabilityZones for your Virtual Private Cloud (VPC). It needs to be consistent with the AZ of your subnets."
      },
      "SGId":{
         "Type":"String",
         "Description":"Security Group ID of your exististing VPC",
         "Default":"sg-9e488efa"
      },
      "S3Bucket":{
         "Type":"String",
         "Description":"The S3 bucket to store the Docker images",
         "ConstraintDescription":"must be the name of an existing S3 Bucket.",
         "Default":"docker-images"
      }
   },
   "Mappings":{  
      "AWSInstanceType2Arch":{  
         "t1.micro":{  
            "Arch":"PV64"
         },
         "t2.micro":{  
            "Arch":"HVM64"
         },
         "t2.small":{  
            "Arch":"HVM64"
         },
         "t2.medium":{  
            "Arch":"HVM64"
         },
         "m1.small":{  
            "Arch":"PV64"
         },
         "m1.medium":{  
            "Arch":"PV64"
         },
         "m1.large":{  
            "Arch":"PV64"
         },
         "m1.xlarge":{  
            "Arch":"PV64"
         },
         "m2.xlarge":{  
            "Arch":"PV64"
         },
         "m2.2xlarge":{  
            "Arch":"PV64"
         },
         "m2.4xlarge":{  
            "Arch":"PV64"
         },
         "m3.medium":{  
            "Arch":"HVM64"
         },
         "m3.large":{  
            "Arch":"HVM64"
         },
         "m3.xlarge":{  
            "Arch":"HVM64"
         },
         "m3.2xlarge":{  
            "Arch":"HVM64"
         },
         "c1.medium":{  
            "Arch":"PV64"
         },
         "c1.xlarge":{  
            "Arch":"PV64"
         },
         "c3.large":{  
            "Arch":"HVM64"
         },
         "c3.xlarge":{  
            "Arch":"HVM64"
         },
         "c3.2xlarge":{  
            "Arch":"HVM64"
         },
         "c3.4xlarge":{  
            "Arch":"HVM64"
         },
         "c3.8xlarge":{  
            "Arch":"HVM64"
         },
         "g2.2xlarge":{  
            "Arch":"HVMG2"
         },
         "r3.large":{  
            "Arch":"HVM64"
         },
         "r3.xlarge":{  
            "Arch":"HVM64"
         },
         "r3.2xlarge":{  
            "Arch":"HVM64"
         },
         "r3.4xlarge":{  
            "Arch":"HVM64"
         },
         "r3.8xlarge":{  
            "Arch":"HVM64"
         },
         "i2.xlarge":{  
            "Arch":"HVM64"
         },
         "i2.2xlarge":{  
            "Arch":"HVM64"
         },
         "i2.4xlarge":{  
            "Arch":"HVM64"
         },
         "i2.8xlarge":{  
            "Arch":"HVM64"
         },
         "hi1.4xlarge":{  
            "Arch":"HVM64"
         },
         "hs1.8xlarge":{  
            "Arch":"HVM64"
         },
         "cr1.8xlarge":{  
            "Arch":"HVM64"
         },
         "cc2.8xlarge":{  
            "Arch":"HVM64"
         }
      },
      "AWSRegionArch2AMI":{  
         "us-east-1":{  
            "PV64":"ami-50842d38",
            "HVM64":"ami-08842d60",
            "HVMG2":"ami-3a329952"
         },
         "us-west-2":{  
            "PV64":"ami-af86c69f",
            "HVM64":"ami-8786c6b7",
            "HVMG2":"ami-47296a77"
         },
         "us-west-1":{  
            "PV64":"ami-c7a8a182",
            "HVM64":"ami-cfa8a18a",
            "HVMG2":"ami-331b1376"
         },
         "eu-west-1":{  
            "PV64":"ami-aa8f28dd",
            "HVM64":"ami-748e2903",
            "HVMG2":"ami-00913777"
         },
         "ap-southeast-1":{  
            "PV64":"ami-20e1c572",
            "HVM64":"ami-d6e1c584",
            "HVMG2":"ami-fabe9aa8"
         },
         "ap-northeast-1":{  
            "PV64":"ami-21072820",
            "HVM64":"ami-35072834",
            "HVMG2":"ami-5dd1ff5c"
         },
         "ap-southeast-2":{  
            "PV64":"ami-8b4724b1",
            "HVM64":"ami-fd4724c7",
            "HVMG2":"ami-e98ae9d3"
         },
         "sa-east-1":{  
            "PV64":"ami-9d6cc680",
            "HVM64":"ami-956cc688",
            "HVMG2":"NOT_SUPPORTED"
         },
         "cn-north-1":{  
            "PV64":"ami-a857c591",
            "HVM64":"ami-ac57c595",
            "HVMG2":"NOT_SUPPORTED"
         },
         "eu-central-1":{  
            "PV64":"ami-a03503bd",
            "HVM64":"ami-b43503a9",
            "HVMG2":"ami-b03503ad"
         }
      }
   },
   "Resources":{  
      "NotificationTopic":{  
         "Type":"AWS::SNS::Topic",
         "Properties":{  
            "Subscription":[  
               {  
                  "Endpoint":{  
                     "Ref":"OperatorEMail"
                  },
                  "Protocol":"email"
               }
            ]
         }
      },
      "WebServerGroup":{  
         "Type":"AWS::AutoScaling::AutoScalingGroup",
         "Properties":{  
            "AvailabilityZones":{  
               "Ref":"AZs"
            },
            "VPCZoneIdentifier":{  
               "Ref":"Subnets"
            },
            "LaunchConfigurationName":{  
               "Ref":"LaunchConfig"
            },
            "MinSize":"2",
            "MaxSize":"4",
            "LoadBalancerNames":[  
               {  
                  "Ref":"ElasticLoadBalancer"
               }
            ],
            "NotificationConfiguration":{  
               "TopicARN":{  
                  "Ref":"NotificationTopic"
               },
               "NotificationTypes":[  
                  "autoscaling:EC2_INSTANCE_LAUNCH",
                  "autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                  "autoscaling:EC2_INSTANCE_TERMINATE",
                  "autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
               ]
            }
         }
      },
      "LaunchConfig":{  
         "Type":"AWS::AutoScaling::LaunchConfiguration",
         "Metadata":{  
            "Comment":"Install a simple application",
            "AWS::CloudFormation::Init":{  
               "config":{  
                  "packages":{  

                  },
                  "files":{  
                     "/etc/cfn/cfn-hup.conf":{  
                        "content":{  
                           "Fn::Join":[  
                              "",
                              [  
                                 "[main]\n",
                                 "stack=",
                                 {  
                                    "Ref":"AWS::StackId"
                                 },
                                 "\n",
                                 "region=",
                                 {  
                                    "Ref":"AWS::Region"
                                 },
                                 "\n"
                              ]
                           ]
                        },
                        "mode":"000400",
                        "owner":"root",
                        "group":"root"
                     },
                     "/etc/cfn/hooks.d/cfn-auto-reloader.conf":{  
                        "content":{  
                           "Fn::Join":[  
                              "",
                              [  
                                 "[cfn-auto-reloader-hook]\n",
                                 "triggers=post.update\n",
                                 "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                                 "action=/opt/aws/bin/cfn-init -v ",
                                 "         --stack ",
                                 {  
                                    "Ref":"AWS::StackName"
                                 },
                                 "         --resource LaunchConfig ",
                                 "         --region ",
                                 {  
                                    "Ref":"AWS::Region"
                                 },
                                 "\n",
                                 "runas=root\n"
                              ]
                           ]
                        }
                     }
                  },
                  "services":{  
                     "sysvinit":{  
                        "httpd":{  
                           "enabled":"true",
                           "ensureRunning":"true"
                        },
                        "cfn-hup":{  
                           "enabled":"true",
                           "ensureRunning":"true",
                           "files":[  
                              "/etc/cfn/cfn-hup.conf",
                              "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                           ]
                        }
                     }
                  }
               }
            }
         },
         "Properties":{  
            "KeyName":{  
               "Ref":"KeyName"
            },
            "ImageId":{  
               "Fn::FindInMap":[  
                  "AWSRegionArch2AMI",
                  {  
                     "Ref":"AWS::Region"
                  },
                  {  
                     "Fn::FindInMap":[  
                        "AWSInstanceType2Arch",
                        {  
                           "Ref":"InstanceType"
                        },
                        "Arch"
                     ]
                  }
               ]
            },
            "SecurityGroups":[  
               {  
                  "Ref":"InstanceSecurityGroup"
               }
            ],
            "InstanceType":{  
               "Ref":"InstanceType"
            },
            "UserData":{  
               "Fn::Base64":{  
                  "Fn::Join":[  
                     "", [
                        "#!/bin/bash -xe\n",
                        "yum update -y\n",
                        "yum install docker -y\n",
                        "yum install git -y\n",
                        "export AWS_BUCKET=",
                        { "Ref" : "S3Bucket" },
                        "\n",
                        "cd /tmp && git clone https://github.com/SaschaMoellering/docker-registry-aws.git\n",
                        "mkdir -p /etc/docker/\n",
                        "cp docker-registry-aws/config/config.yml /etc/docker/\n",
                        "LOCAL_IP=`ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\\.){3}[0-9]*).*/\\2/p'`\n",
                        "sed -e \"s/@IP@/$LOCAL_IP/g\" docker-registry-aws/config/docker.template > /etc/sysconfig/docker\n",
                        "cp docker-registry-aws/service/docker-registry /etc/init.d\n",
                        "chmod a+x /etc/init.d/docker-registry\n",
                        "chkconfig --add docker-registry\n",
                        "service docker start\n",
                        "service docker-registry start\n",
                        "/opt/aws/bin/cfn-init -v ",
                        "         --stack ",
                        {  
                           "Ref":"AWS::StackName"
                        },
                        "         --resource LaunchConfig ",
                        "         --region ",
                        {  
                           "Ref":"AWS::Region"
                        },
                        "\n",
                        "/opt/aws/bin/cfn-signal -e $? ",
                        "         --stack ",
                        {  
                           "Ref":"AWS::StackName"
                        },
                        "         --resource WebServerGroup ",
                        "         --region ",
                        {  
                           "Ref":"AWS::Region"
                        },
                        "\n"
                     ]
                  ]  
               }
            }
         }
      },
      "WebServerScaleUpPolicy":{  
         "Type":"AWS::AutoScaling::ScalingPolicy",
         "Properties":{  
            "AdjustmentType":"ChangeInCapacity",
            "AutoScalingGroupName":{  
               "Ref":"WebServerGroup"
            },
            "Cooldown":"60",
            "ScalingAdjustment":"1"
         }
      },
      "WebServerScaleDownPolicy":{  
         "Type":"AWS::AutoScaling::ScalingPolicy",
         "Properties":{  
            "AdjustmentType":"ChangeInCapacity",
            "AutoScalingGroupName":{  
               "Ref":"WebServerGroup"
            },
            "Cooldown":"60",
            "ScalingAdjustment":"-1"
         }
      },
      "CPUAlarmHigh":{  
         "Type":"AWS::CloudWatch::Alarm",
         "Properties":{  
            "AlarmDescription":"Scale-up if CPU > 70% for 10 minutes",
            "MetricName":"CPUUtilization",
            "Namespace":"AWS/EC2",
            "Statistic":"Average",
            "Period":"300",
            "EvaluationPeriods":"2",
            "Threshold":"70",
            "AlarmActions":[  
               {  
                  "Ref":"WebServerScaleUpPolicy"
               }
            ],
            "Dimensions":[  
               {  
                  "Name":"AutoScalingGroupName",
                  "Value":{  
                     "Ref":"WebServerGroup"
                  }
               }
            ],
            "ComparisonOperator":"GreaterThanThreshold"
         }
      },
      "CPUAlarmLow":{  
         "Type":"AWS::CloudWatch::Alarm",
         "Properties":{  
            "AlarmDescription":"Scale-down if CPU < 20% for 10 minutes",
            "MetricName":"CPUUtilization",
            "Namespace":"AWS/EC2",
            "Statistic":"Average",
            "Period":"300",
            "EvaluationPeriods":"2",
            "Threshold":"20",
            "AlarmActions":[  
               {  
                  "Ref":"WebServerScaleDownPolicy"
               }
            ],
            "Dimensions":[  
               {  
                  "Name":"AutoScalingGroupName",
                  "Value":{  
                     "Ref":"WebServerGroup"
                  }
               }
            ],
            "ComparisonOperator":"LessThanThreshold"
         }
      },
      "ElasticLoadBalancer":{  
         "Type":"AWS::ElasticLoadBalancing::LoadBalancer",
         "Properties":{  
            "AvailabilityZones":{  
               "Fn::GetAZs":""
            },
            "CrossZone":"true",
            "Listeners":[  
               {  
                  "LoadBalancerPort":"80",
                  "InstancePort":"5000",
                  "Protocol":"HTTP"
               }
            ],
            "HealthCheck":{  
               "Target":"HTTP:5000/",
               "HealthyThreshold":"3",
               "UnhealthyThreshold":"5",
               "Interval":"30",
               "Timeout":"5"
            }
         }
      },
      "InstanceSecurityGroup":{  
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{  
            "GroupDescription":"Enable SSH access and HTTP from the load balancer only",
            "VpcId":{  
               "Ref":"VpcId"
            },
            "SecurityGroupIngress":[  
               {  
                  "IpProtocol":"tcp",
                  "FromPort":"22",
                  "ToPort":"22",
                  "CidrIp":{  
                     "Ref":"SSHLocation"
                  }
               },
               {  
                  "IpProtocol":"tcp",
                  "FromPort":"80",
                  "ToPort":"80",
                  
                  "SourceSecurityGroupId":{  
                     "Ref":"SGId"
                  }
               }
            ]
         }
      }
   },
   "Outputs":{  
      "URL":{  
         "Description":"The URL of the website",
         "Value":{  
            "Fn::Join":[  
               "",
               [  
                  "http://",
                  {  
                     "Fn::GetAtt":[  
                        "ElasticLoadBalancer",
                        "DNSName"
                     ]
                  }
               ]
            ]
         }
      }
   }
}